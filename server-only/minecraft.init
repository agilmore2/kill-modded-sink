#!/bin/bash
# could be installed in /etc/init.d/minecraft
# version 0.5 2011-09-24 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO

#Settings
SERVICE='mcpc-plus-1.6.4-R2.1-forge965-B236+pingfix.jar'
USERNAME="minecraft"
MCPATH="/home/$USERNAME/sink-server"
#MCPATH='/dev/shm/patserver'
CPU_COUNT=1
INVOCATION="java -Xmx1536M -Xms512M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalPacing -XX:+AggressiveOpts -jar $SERVICE nogui"
BACKUPPATH="/home/$USERNAME/sink-server-backups/"


ME=`whoami`
as_user() {
  if [ "$ME" == "$USERNAME" ] ; then
    bash -c "$1"
  else
    su - $USERNAME -c "$1"
  fi
}

mc_start() {
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
  then
    echo "Tried to start but $SERVICE was already running!"
  else
    echo "$SERVICE was not running... starting."
    cd $MCPATH
    if [ ! -f "$MCPATH/$SERVICE" ]
    then 
      echo "Can't find $SERVICE!"
      exit 1
    fi
    as_user "cd $MCPATH && screen -dmS minecraft $INVOCATION"
    sleep 7
    if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then
      echo "$SERVICE is now running."
    else
      echo "Could not start $SERVICE."
    fi
  fi
}

mc_saveoff() {
        if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "$SERVICE is running... suspending saves"
		as_user "screen -p 0 -S minecraft -X eval 'stuff \"say SERVER BACKUP STARTING. Server going readonly...\"\015'"
                as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-off\"\015'"
                as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-all\"\015'"
                sync
		sleep 10
	else
                echo "$SERVICE was not running. Not suspending saves."
	fi
}

mc_saveon() {
        if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "$SERVICE is running... re-enabling saves"
                as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-on\"\015'"
                as_user "screen -p 0 -S minecraft -X eval 'stuff \"say SERVER BACKUP ENDED. Server going read-write...\"\015'"
	else
                echo "$SERVICE was not running. Not resuming saves."
	fi
}

mc_stop() {
        if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
        then
                echo "$SERVICE is running... stopping."
                as_user "screen -p 0 -S minecraft -X eval 'stuff \"say SERVER SHUTTING DOWN IN 5 SECONDS. Saving map...\"\015'"
                as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-all\"\015'"
                sleep 5
                as_user "screen -p 0 -S minecraft -X eval 'stuff \"stop\"\015'"
                sleep 5
        else
                echo "$SERVICE was not running."
        fi
        if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
        then
                echo "$SERVICE could not be shut down... still running."
        else
                echo "$SERVICE is shut down."
        fi
}


mc_update() {
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
  then
    echo "$SERVICE is running! Will not start update."
  else
#    MC_SERVER_URL=http://minecraft.net/`wget -q -O - http://www.minecraft.net/download.jsp | grep minecraft_server.jar\</a\> | cut -d \" -f 2`
#    as_user "cd $MCPATH && wget -q -O $MCPATH/minecraft_server.jar.update $MC_SERVER_URL"
#    if [ -f $MCPATH/minecraft_server.jar.update ]
#    then
#      if `diff $MCPATH/minecraft_server.jar $MCPATH/minecraft_server.jar.update >/dev/null`
#        then 
#          echo "You are already running the latest version of $SERVICE."
#        else
#         as_user "mv $MCPATH/minecraft_server.jar.update $MCPATH/minecraft_server.jar"
          echo "Minecraft updating disabled, not successfully updated."
#      fi
#    else
      echo "Minecraft update could not be downloaded."
#    fi
  fi
}

mc_backup() {
   echo "Backing up minecraft files"
   if [ -f $BACKUPPATH/MCBKUP_`date "+%Y.%m.%d"`.tar.gz ]
   then
     for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
     do
       if [ -f $BACKUPPATH/MCBKUP_`date "+%Y.%m.%d"`-$i.tar.gz ]
       then
         continue
       else
         as_user "cd $MCPATH && tar zcf $BACKUPPATH/MCBKUP_`date "+%Y.%m.%d"`-$i.tar.gz ."
         break
       fi
     done
   else
     as_user "cd $MCPATH && tar zcf $BACKUPPATH/MCBKUP_`date "+%Y.%m.%d"`.tar.gz ."
   fi
   echo "Backup complete"
}

mc_disksaverun() {

  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
  then
   echo "Saving ramdrive to disk."
   if [ ! -f $MCPATH/$SERVICE ]
   then
     echo "Error.. Minecraft not in ram"
   else
     as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-off\"\015'"
     as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-all\"\015'" 
     as_user "rsync -rtl $MCPATH/ $MCSTORE/"
     as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-on\"\015'"

   fi
  else
  echo "Service is not running"
 fi

}

mc_disksavehalt() {
   echo "Saving ramdrive to disk."
   if [ ! -f $MCPATH/craftbukkit.jar ]
   then 
     echo "Error.. Minecraft not in ram"
   else

     echo "Saving, screen session closed"
     as_user "rsync -rtl $MCPATH/ $MCSTORE/"

   fi
}

mc_command() {
  command="$1";
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    pre_log_len=`wc -l "$MCPATH/server.log" | awk '{print $1}'`
    echo "$SERVICE is running... executing command"
    as_user "screen -p 0 -S minecraft -X eval 'stuff \"$command\"\015'"
    sleep .1 # assumes that the command will run and print to the log file in less than .1 seconds
    # print output
    tail -n $[`wc -l "$MCPATH/server.log" | awk '{print $1}'`-$pre_log_len] "$MCPATH/server.log"
  fi
}

#Start-Stop here
case "$1" in
  start)
    mc_start
    ;;
  stop)
    mc_stop
#    mc_disksavehalt
    ;;
  restart)
    mc_stop
#    mc_disksavehalt
    mc_start
    ;;
  update)
    mc_stop
#    mc_disksavehalt
    mc_backup
    mc_update
    mc_start
    ;;
  backup)
    mc_saveoff
#    mc_disksaverun
    mc_backup
    mc_saveon
    ;;
#  disksavehalt)
#    mc_disksavehalt
#    ;;
#  disksaverun)
#    mc_disksaverun
#    ;;
  status)
    if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;
  command)
    if [ $# -gt 1 ]; then
      shift
      mc_command "$*"
    else
      echo "Must specify server command (try 'help'?)"
    fi
    ;;
  *)
  echo "Usage: minecraft.init {start|stop|update|backup|status|restart|command}"
  exit 1
  ;;
esac

exit 0
